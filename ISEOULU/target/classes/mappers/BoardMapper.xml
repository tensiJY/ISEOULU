<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<!--  게시판 관련 SQL 등록  -->
<mapper namespace="board">	
	<!-- 게시판 목록 조회 SQL --> 	
	<select id="boardList"	 parameterType="hMap"	resultType="bvo">
		SELECT
        *
    FROM
        (SELECT
            ROWNUM AS rno,
            R1.*
        FROM
            (SELECT
                B_NO as no,
                B_TITLE as title, 
                B_WRITER as writer, 
                B_CONTENT as content, 
                B_PASSWORD as password, 
                B_TAG as tags, 
                B_HIT as hit, 
                B_GROUP as bgroup, 
                B_STEP as bstep, 
                B_ORDER as border, 
                B_REGDATE as wday
            FROM
                BOARD
            WHERE
                        B_ISSHOW = 'Y'
                AND B_STEP = 0
            ORDER BY
                B_GROUP DESC, B_ORDER ASC) R1)
		WHERE
			rno BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 	페이지 정보를 구하기 위한 총 데이터 개수 구하기 SQL -->
	<select id="getTotal"		resultType="int">
		SELECT
			COUNT(*)
		FROM
			BOARD
		WHERE
					B_ISSHOW = 'Y'
			AND	B_STEP = 0
	</select>
	
	<!-- 	원글 정보 기록 질의 명령 -->
	<insert id="insertBoard"		parameterType="bvo">
		<!-- 	원글의 정보를 기록할때는 원글의 번호를 알아야 한다.
				이 방법은 sub 질의를 이용해서 처리하는 방법이 있다.
				==>		이 방법은 서브 질의의 결과를 알지 못한다.(다른곳에서 사용 못한다.)
				
				이 방법 보다는 myBatis에서 제공하는 selectKey 방식을 이용하면 좀더 효율적이다.
				==>		이 방법은 selectKey의 질의 결과를 변수에 기억한 후 사용하는 형식이므로
						다른 곳에서 그 변수를 이용하면 결과를 알 수 있다.
		-->
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			SELECT
				NVL(MAX(B_NO), 0) + 1
			FROM
				Board
		</selectKey>
		
		INSERT
		INTO
			Board
		VALUES
			(#{no}, #{title}, #{writer}, #{content},  #{password}, #{tags},0,
			#{no}, 0, 0,'Y', SYSDATE, SYSDATE)
	</insert>
	<!-- 	파일 정보 기록 질의 명령 -->
	<insert id="fileInfoInsert"	parameterType="hMap">
		INSERT
		INTO
			FILEINFO
		VALUES
		( (SELECT NVL(MAX(F_NO), 0) + 1 FROM FILEINFO), 
		#{oriNo}, #{oriName}, #{saveName}, #{len}, #{path}, 0, 'Y', SYSDATE, SYSDATE)	
		
	</insert>
		<!-- 	답글이 입력될때 오더를 정리하기 위한 질의 명령 -->
	<update id="orderSet"	parameterType="hMap">
		UPDATE
			Board
		SET
			b_Order = b_Order + 1
		WHERE
					b_Group = #{bgroup}
			AND	b_Order >= #{border}
	</update>

	<!-- 	댓글 저장용 질의 명령 -->
	<insert id="anInsert"		parameterType="bvo">
		<selectKey keyProperty="no"	resultType="int"	order="BEFORE">
			SELECT
				NVL(MAX(B_NO), 0) + 1
			FROM
				Board
		</selectKey>
		INSERT
		INTO
			Board
		VALUES(#{no}, #{title}, #{writer}, #{content},#{password},#{tags}, 0, 
				 #{bgroup}, #{bstep}, #{border}, 'Y',SYSDATE, SYSDATE)		
	</insert>
	

	
	<!-- 	상세보기 꺼내기 -->
	<select id="boardView"	parameterType="int"	resultType="bvo">
		SELECT
			B_NO AS no,
            B_TITLE AS title,
            B_WRITER AS writer,
            B_CONTENT AS content,
            B_TAG AS tags,
            B_HIT as hit,
            B_GROUP as bgroup, 
            B_STEP as bstep, 
            B_ORDER as border, 
            B_REGDATE as wday
		FROM
			BOARD
		WHERE
			B_NO = #{oriNo}
	</select>
	<!-- 	첨부파일 꺼내기 -->
	<select id="boardFile"	parameterType="int"		resultType="bvo">
		SELECT
			 F_NO            AS no,
                B_ORINO        AS oriNo,
                F_ORINAME    AS oriName,
                F_SAVENAME    AS saveName,
                F_LENGTH        AS len,
                F_PATH        AS path,
                F_DOWNLOAD    AS download,
                F_UPDATE        AS uploadDay
            FROM
                FILEINFO
		WHERE
			B_ORINO = #{oriNo}
			AND F_ISSHOW = 'Y'
	</select>
	<!-- 	이전글 다음글 -->
	<select id="prenext"	parameterType="int"		resultType="hmap">
		<!-- 	LEAD 함수의 단점
				한번에 한개의 데이터만 꺼낼 수 있다.
				만약 이전 데이터가 2개이상 필요하면 함수를 2번 이상 사용해야 한다.
				
				우리는 이전글을 처리하기 위해서는 제목, 글번호를 알아야한다.
		-->
		<!-- 	2.	내가 필요한 글 번호만 꺼낸다.	 -->
		SELECT
			*
		FROM
		<!-- 	1	모든 데이터의 이전글과 다음글을 꺼낸 후 -->
			(SELECT
				B_NO,
				LAG(B_NO, 1, 0) OVER(ORDER BY B_NO DESC) PRENO,
				LAG(B_TITLE, 1, '이전글 없음') OVER(ORDER BY B_NO DESC) PRETITLE,
				LEAD(B_NO, 1, 0) OVER(ORDER BY B_NO DESC) NEXTNO,
				LEAD(B_TITLE, 1, '다음글 없음') OVER(ORDER BY B_NO DESC) NEXTTITLE
			FROM
				BOARD
			WHERE  B_STEP =0
				AND  B_ISSHOW = 'Y'
			ORDER BY
				B_NO DESC)
			WHERE B_NO = #{bgroup}
			
	</select>
	<!-- 	검색 이전글 다음글 -->
	<select id="searchprenext"	parameterType="hmap"		resultType="hmap">
		SELECT
			*
		FROM
			(SELECT
				b_no,
				LAG(b_no, 1, 0) OVER(ORDER BY b_no DESC) PRENO,
				LAG(b_title, 1, '이전글 없음') OVER(ORDER BY b_no DESC) PRETITLE,
				LEAD(b_no, 1, 0) OVER(ORDER BY b_no DESC) NEXTNO,
				LEAD(b_title, 1, '다음글 없음') OVER(ORDER BY b_no DESC) NEXTTITLE
			FROM
				Board
			WHERE
				B_STEP =0 AND  B_ISSHOW = 'Y' AND
			<if test="target eq 'writer'">
				B_WRITER LIKE '%' || #{word} || '%'	
			</if>
			<if test="target eq 'title'">
				B_TITLE LIKE '%' || #{word} || '%'
			</if>
			<if test="target eq 'body'">
				B_CONTENT like '%' || #{word} || '%'
			</if>
			<if test="target eq 'tags'">
					<!-- 	태그 검색 -->
					B_TAG LIKE '%#' || #{word} || '#%'
			</if>
			ORDER BY
				b_no DESC)
		WHERE
			B_NO = #{bgroup} 
	</select>
	
	<!-- 	원글에 달린 댓글 알아내는 질의 명령 -->
	<!-- 	어짜피 우리는 oriNo만 가지고 있으므로
			필요한 Group을 구하기 위한 질의 명령을 먼저실행한다.
	-->
	<select id="getGroup" parameterType="int" resultType="int">
			SELECT
				b_Group AS bgroup
			FROM
				Board
			WHERE
				b_NO = #{oriNo}
	</select>
	<select id="anList"		parameterType="int"		resultType="bvo">
		SELECT
                B_NO as no,
                B_TITLE as title, 
                B_WRITER as writer, 
                B_CONTENT as content, 
                B_PASSWORD as password, 
                B_TAG as tags, 
                B_HIT as hit, 
                B_GROUP as bgroup, 
                B_STEP as bstep, 
                B_ORDER as border, 
                B_REGDATE as wday
		FROM
			Board
		WHERE
<!-- 	원글인 경우에는 원글의 번호가 그룹 번호가 같아지기 때문에 원글인 경우에는
		같은 그룹의 글들을 검색할 수 있었다.
		
		댓글인 경우에는 댓글의 번호하고 그룹 번호가 같지 않다.
		
		해결 방법
		==>		비교 대상을 그룹의 번호를 이용해서 처리해야 한다.
		
		즉 상세보기를 요청할때 그룹도 같이 알여주어서 그 그룹을 이용해서 
		처리하도록 해야 한다.
		
		조건식의 데이터가 바뀌므러 컨트롤러에서 oriNo를 사용하던 것을
		그룹 번호로 바꾸어서 처리하도록 고쳐야한다.
-->
			b_Group = #{bgroup} 
			AND  B_ISSHOW = 'Y'
		ORDER BY
			b_Order
	</select>
	
	
	<!-- 	이미 본 글 번호를 조회할 질의 명령 
			노파심
				파라메터 방식
				1.	일반 데이터 방식	==>		데이터 개수가 적을때
				2.	Map
				3.	VO
	-->
	<resultMap id="clobMap" type="hmap">
		<result property="no" column="bh_No" jdbcType="CLOB" javaType="java.lang.String" />
		<result property="title" column="title" />
		<result property="firstimage" column="firstimage" />
		<result property="overview" column="overview" jdbcType="CLOB" javaType="java.lang.String" />
	</resultMap>
	<select id="getHitNO"	parameterType="String"		resultMap="clobMap">
		SELECT
			bh_User	AS who,
			bh_No
		FROM
			BoardHit
		WHERE
			bh_User = #{user}
	</select>
	<!-- 	처음 방문한 사람의 위한 이미 본 글번호 등록 질의 명령 -->
	<insert id="insertHitNO"	parameterType="hmap">
		INSERT
		INTO
			BoardHit
		VALUES(#{user}, #{no})
	</insert>
	<!-- 	기존 방문한 사람의 위한 이미 본 글번호 수정 질의 명령  -->
	<update id="updateHitNO"	parameterType="hmap">
		UPDATE
			BoardHit
		SET
			bh_No = #{no}
		WHERE
			bh_User = #{user}
	</update>
	<!-- 	조회수 증가 질의 명령 -->
	<update id="updateHit"	parameterType="int">
		UPDATE
			Board
		SET
			b_Hit = b_Hit + 1
		WHERE
			b_NO = #{oriNo}
	</update>

	
	
	<!-- 	다운로드 해줄 파일의 정보 검색 질의 -->
	<select id="downloadInfo"	parameterType="int"		resultType="bvo">
		SELECT
			F_NO			AS no,
			B_ORINO		AS oriNo,
			F_ORINAME 	AS oriName,
			F_SAVENAME	AS saveName,
			F_LENGTH		AS len,
			F_PATH		AS path,
			F_DOWNLOAD	AS download,
			F_REGDATE		AS uploadDay
		FROM
			FILEINFO
		WHERE
			F_NO = #{fNo}		
			AND F_ISSHOW = 'Y'
	</select>
	
	<select id="searchList"	resultType="bvo"	parameterType="hmap">
	  	SELECT
        *
    FROM
        (SELECT
            ROWNUM AS rno,
            R1.*
        FROM
            (
				SELECT
					B_NO as no,
		            B_TITLE as title, 
		            B_WRITER as writer, 
		            B_CONTENT as content, 
		            B_PASSWORD as password, 
		            B_TAG as tags, 
		            B_HIT as hit, 
		            B_GROUP as bgroup, 
		            B_STEP as bstep, 
		            B_ORDER as border, 
		            B_REGDATE as wday
				FROM
					Board
				WHERE
						B_Step = 0
						AND  B_ISSHOW = 'Y' 
						AND	B_Group IN (
						SELECT
							B_Group
						FROM
							Board
						WHERE
							<!-- 	조건은 4가지 경우에 따라서 달라지며
									어디서 검색할지는 kind라는 변수에 기억되어 있다.
							-->			
							<if test="target eq 'title'">
								B_TITLE LIKE '%' || #{word} || '%'
							</if>
							<if test="target eq 'body'">
								<!-- 	본문 검색 -->
								B_CONTENT LIKE '%' || #{word} || '%'
							</if>
							<if test="target eq 'writer'">
								<!-- 	글쓴이 검색 -->
								B_WRITER LIKE '%' || #{word} || '%'
							</if>
							<if test="target eq 'tags'">
								<!-- 	태그 검색 -->
								B_TAG LIKE '%#' || #{word} || '#%'
							</if>
					)
				ORDER BY NO DESC ) R1)
		WHERE
			rno BETWEEN #{start} AND #{end}
			
	</select>
	<!-- 	페이지 이동 기능을 구현하기 위해서는 검색 결과 총 개수를 알아야 한다. -->
	<select id="searchTotal"		resultType="int"		parameterType="hmap">
		SELECT
			COUNT(*) AS cnt
		FROM
			Board
		WHERE
			<if test="target eq 'writer'">
				B_WRITER LIKE '%' || #{word} || '%'	
			</if>
			<if test="target eq 'title'">
				B_TITLE LIKE '%' || #{word} || '%'
			</if>
			<if test="target eq 'body'">
				B_CONTENT like '%' || #{word} || '%'
			</if>
			<if test="target eq 'tags'">
					<!-- 	태그 검색 -->
					B_TAG LIKE '%#' || #{word} || '#%'
			</if>
			AND 	b_IsShow = 'Y'
	</select>
		
	<update id = "downloadCnt" parameterType = "int">
			UPDATE FILEINFO
			SET (F_DOWNLOAD) = (SELECT F_DOWNLOAD +1 AS CNT FROM FILEINFO  WHERE F_NO = #{fno} )
			WHERE F_NO =#{fno}
	</update>
		<!-- 	수정을 위한 질의 명령 -->
	<update id="updateBoard"	parameterType="bvo">
		UPDATE
			BOARD
		SET
			B_TITLE = #{title},
			B_CONTENT = #{content},
			B_TAG = #{tags},
			B_UPDATE = SYSDATE
		WHERE
					B_NO = #{oriNo}			
			AND	B_PASSWORD = #{password}
	</update>
	
	
	<!-- 	삭제를 위한 질의 명령 -->
	<update id="deleteBoard"	parameterType="bvo">
		UPDATE
			BOARD
		SET
			B_ISSHOW = 'N',
			B_UPDATE = SYSDATE
		WHERE
			B_NO = #{oriNo}
			AND	B_PASSWORD = #{password}	
	</update>
	<update id="deleteFileinfo"	parameterType="bvo">
		UPDATE
			FILEINFO
		SET
			F_ISSHOW = 'N',
			F_UPDATE = SYSDATE
		WHERE
					B_ORINO= #{oriNo}	
	</update>
	
	
	
	<select id="getContent"	 parameterType="int"	 resultMap="clobMap">
		SELECT TITLE as title, FIRSTIMAGE as firstimage, OVERVIEW as overview
		FROM 
		    (SELECT TITLE, FIRSTIMAGE FROM BASETBL WHERE CONTENTID = #{contentId} )A,
		    ( SELECT OVERVIEW FROM (
		        SELECT OVERVIEW FROM STAYINFOTBL WHERE CONTENTID = #{contentId}
		        UNION ALL
		        SELECT OVERVIEW FROM TRAVELINFOTBL WHERE CONTENTID = #{contentId}
		        UNION ALL
		        SELECT OVERVIEW FROM FOODINFOTBL WHERE CONTENTID = #{contentId}))B
	</select>
</mapper>


